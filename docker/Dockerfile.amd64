# Use the official ROS Noetic base image
FROM ros:noetic AS ros-noetic-base

# Add ubuntu user with same UID and GID as your host system, if it doesn't already exist
ARG USERNAME=ubuntu
ARG USER_UID=1000
ARG USER_GID=$USER_UID
RUN if ! id -u $USER_UID >/dev/null 2>&1; then \
        groupadd --gid $USER_GID $USERNAME && \
        useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME; \
    fi

# Add sudo support for the non-root user
RUN apt update && \
    apt install -y sudo && \
    echo "$USERNAME ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/$USERNAME && \
    chmod 0440 /etc/sudoers.d/$USERNAME && \
    usermod --append --groups video ${USERNAME}

# Set environment variables
ENV QT_X11_NO-MITSHM=1 \
    CPLUS_INCLUDE_PATH=/opt/ros/noetic/include \
    LD_LIBRARY_PATH=/opt/ros/noetic/lib \
    CATKIN_WS=/home/${USERNAME}/catkin_ws \
    USR_HOME=/home/${USERNAME} \
    GMU_RTX=/home/${USERNAME}/gmu-rtx

# Rosdep update
RUN rosdep update

# Source the ROS setup file
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> "${USR_HOME}/.bashrc"

# Multistage build for dependencies
FROM ros-noetic-base AS dependencies-core

# Copy apt package manifest into container
COPY ./apt-packages.txt /tmp/apt-packages.txt

# Install system dependencies and useful tools
RUN apt update && \
    xargs -a /tmp/apt-packages.txt apt install --no-install-recommends -y && \
    apt autoremove --purge -y && \
    apt autoclean && \
    rm -rf /var/lib/apt/lists/*

# Add /home/ubuntu/.local/bin to the PATH
ENV PATH="${USR_HOME}/.local/bin:${PATH}"

FROM dependencies-core AS dependencies-realsense2

# Switch to non-root user -- required for RealSense
USER ${USERNAME}

# Setup Intel RealSense SDK for amd64
RUN sudo mkdir -p /etc/apt/keyrings && \
    curl -sSf https://librealsense.intel.com/Debian/librealsense.pgp | sudo tee /etc/apt/keyrings/librealsense.pgp > /dev/null && \
    echo "deb [signed-by=/etc/apt/keyrings/librealsense.pgp] https://librealsense.intel.com/Debian/apt-repo `lsb_release -cs` main" | \
    sudo tee /etc/apt/sources.list.d/librealsense.list && \
    sudo apt update

RUN sudo apt install --no-install-recommends -y \
        librealsense2-dkms \
        librealsense2-utils \
        librealsense2-dev \
        librealsense2-dbg && \
    sudo rm -rf /var/lib/apt/lists/*

# Switch back to root
USER root

FROM dependencies-realsense2 AS dependencies-arduino

# Install arduino-cli for amd64
RUN mkdir -p /usr/local/bin && \
    curl -fsSL --retry 5 --fail https://downloads.arduino.cc/arduino-cli/arduino-cli_latest_Linux_64bit.tar.gz \
        -o ~/arduino-cli.tar.gz && \
    tar -xzf ~/arduino-cli.tar.gz -C /usr/local/bin && \
    rm -rf ~/arduino-cli.tar.gz && \
    chmod +x /usr/local/bin/arduino-cli

# Install the required Arduino libraries
RUN arduino-cli config init && \
    arduino-cli core update-index && \
    arduino-cli core install arduino:avr

# Install ros_lib in Arduino sketchbook directory
WORKDIR ${USR_HOME}/Arduino/libraries
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && \
                  rosrun rosserial_arduino make_libraries.py ."

FROM dependencies-arduino AS dependencies-python

# Copy requirements.txt into container
COPY ./requirements.txt /tmp/requirements.txt

# Install lightweight Python libraries for robotics
RUN pip3 install --upgrade pip --no-cache-dir && \
    pip3 install --no-cache-dir -r /tmp/requirements.txt 

FROM dependencies-python AS ros-initialize-catkin

# Create the catkin_ws directories
RUN mkdir -p "${CATKIN_WS}/src"

# Setup SSH keys
RUN mkdir -p -m 0700 /root/.ssh && \
    ssh-keyscan github.com >> /root/.ssh/known_hosts

# Clone the gmu-rtx repo 
RUN --mount=type=ssh \
    git clone --recursive git@github.com:gmu-rtx-ground/gmu-rtx.git ${GMU_RTX} && \
    cd ${GMU_RTX} && \
    git submodule update --init --recursive

# Add udev rules for modules from gmu-rtx repo
RUN cp ${GMU_RTX}/ROS/udev_rules/* /etc/udev/rules.d/

# Create Symbolic link for the ROS workspace
RUN HOME=${USR_HOME} && cd ${GMU_RTX} && make links

# Grant permissions to the user
RUN chown -R ${USER_UID}:${USER_GID} ${CATKIN_WS} & \
    chown -R ${USER_UID}:${USER_GID} ${GMU_RTX}

# Build the ROS workspace
WORKDIR ${CATKIN_WS}

# Initialize and build the workspace
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && \
                    catkin init && \
                    catkin build && \
                    catkin test"

# Source the ROS workspace
RUN echo "source ${CATKIN_WS}/devel/setup.bash" >> ${USR_HOME}/.bashrc

# Set the working directory to the project directory
WORKDIR ${GMU_RTX}

USER ${USERNAME}

# Mount common Ubuntu Linux paths as volumes
VOLUME ["/home", "/mnt", "/opt"]
