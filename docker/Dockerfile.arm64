# Multistage build for dependencies
FROM ghcr.io/gmu-rtx-ground/gmu-rtx:arm64-prerequisite AS dependencies-core

ARG USERNAME=ubuntu
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Copy apt package manifest into container
COPY ./apt-packages.txt /tmp/apt-packages.txt

# Install system dependencies and useful tools
RUN apt update && \
    xargs -a /tmp/apt-packages.txt apt install --no-install-recommends -y && \
    apt autoremove --purge -y && \
    apt autoclean && \
    rm -rf /var/lib/apt/lists/*

# Add /home/ubuntu/.local/bin to the PATH
ENV PATH="${USR_HOME}/.local/bin:${PATH}"

FROM dependencies-core AS dependencies-arduino

# Create a directory for the Arduino CLI binary
RUN mkdir -p /usr/local/bin

# Install arduino-cli for arm64
RUN curl -fsSL --retry 5 --fail https://downloads.arduino.cc/arduino-cli/arduino-cli_latest_Linux_ARM64.tar.gz \
-o ~/arduino-cli.tar.gz && \
tar -xzf ~/arduino-cli.tar.gz -C /usr/local/bin && \
rm -rf ~/arduino-cli.tar.gz && \
chmod +x /usr/local/bin/arduino-cli

# Install the required Arduino libraries
RUN arduino-cli config init && \
arduino-cli core update-index && \
arduino-cli core install arduino:avr

# Install ros_lib in Arduino sketchbook directory
WORKDIR ${USR_HOME}/Arduino/libraries
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && \
              rosrun rosserial_arduino make_libraries.py ."

FROM dependencies-arduino AS dependencies-python

# Copy requirements.txt into container
COPY ./requirements.txt /tmp/requirements.txt

# Install lightweight Python libraries for robotics
RUN pip3 install --upgrade pip --no-cache-dir && \
    pip3 install --no-cache-dir -r /tmp/requirements.txt

FROM dependencies-python AS ros-initialize-catkin

# Create the catkin_ws directories
RUN mkdir -p "${CATKIN_WS}/src"

# Setup SSH keys
RUN mkdir -p -m 0700 /root/.ssh && \
    ssh-keyscan github.com >> /root/.ssh/known_hosts

# Clone the gmu-rtx repo 
RUN --mount=type=ssh \
    git clone --recursive git@github.com:gmu-rtx-ground/gmu-rtx.git ${GMU_RTX} && \
    cd ${GMU_RTX} && \
    git submodule update --init --recursive

# Add udev rules for modules from gmu-rtx repo
RUN cp ${GMU_RTX}/ROS/udev_rules/* /etc/udev/rules.d/

# Create Symbolic link for the ROS workspace
RUN HOME=${USR_HOME} && cd ${GMU_RTX} && make links

# Grant permissions to the user
RUN chown -R ${USER_UID}:${USER_GID} ${CATKIN_WS} & \
    chown -R ${USER_UID}:${USER_GID} ${GMU_RTX}

# Build the ROS workspace
WORKDIR ${CATKIN_WS}

USER ${USERNAME}

# Initialize and build the workspace
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && \
                    catkin init && \
                    catkin build && \
                    catkin test"

# Source the ROS workspace
RUN echo "source ${CATKIN_WS}/devel/setup.bash" >> ${USR_HOME}/.bashrc

# Set the working directory to the project directory
WORKDIR ${GMU_RTX}

# Mount common Ubuntu Linux paths as volumes
VOLUME ["/home", "/mnt", "/opt"]
