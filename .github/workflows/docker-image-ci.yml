name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ghcr.io/${{ github.repository }}

permissions:
  contents: read
  pull-requests: read

jobs:
  run-tests:
      runs-on: ubuntu-latest
      env:
        ARDUINO_PLATFORM: 'arduino:avr'
        FQBN: 'arduino:avr:mega'
      outputs:
        amd64_changed: ${{ steps.filter.outputs.amd64 }}
        arm64_changed: ${{ steps.filter.outputs.arm64 }}
        arduino_changed: ${{ steps.filter.outputs.arduino }}
        python_changed: ${{ steps.filter.outputs.python }}
        ros_changed: ${{ steps.filter.outputs.ros }}
        build_flag: ${{ steps.flag.outputs.flag }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Check which file(s) have changed
          id: filter
          uses: dorny/paths-filter@v3
          with:
            filters: |
              amd64:
                - 'docker/Dockerfile.amd64'
              arm64:
                - 'docker/Dockerfile.arm64'
                - 'docker/arm64-prerequisite.Dockerfile'
              arduino:
                - 'Arduino/**'
              python:
                - 'python/**'
              ros:
                - 'ROS/**'
          
        # Arduino Tests
        - name: Set up Arduino CLI
          if: ${{ steps.filter.outputs.arduino == 'true' }}
          uses: arduino/setup-arduino-cli@v2

        - name: Install board support
          if: ${{ steps.filter.outputs.arduino == 'true' }}
          run: |
            ardiuno-cli core update-index
            arduino-cli core install ${{ env.ARDUINO_PLATFORM }}

        - name: Compile sketch
          if: ${{ steps.filter.outputs.arduino == 'true' }}
          run: |
            arduino-cli compile --fqbn ${{ env.FQBN }} ${{ github.workspace }}/Arduino/robot_controller
        
        # Python Tests
        - name: Set up Python
          if: ${{ steps.filter.outputs.python == 'true' }}
          uses: actions/setup-python@v5
          with:
            python-version: '3.8'
        
        # ROS Tests placeholder

        - name: Build Check
          id: flag
          run: | 
            if [ "${{ github.event_name }}" != "pull_request" ] && \
              { [ "${{ steps.filter.outputs.amd64 }}" = "true" ] || [ "${{ job.filter.outputs.arm64 }}" = "true" ]; }; then
              echo "flag=true" >> $GITHUB_OUTPUT
            else
              echo "flag=false" >> $GITHUB_OUTPUT
            fi


  build:
    needs: run-tests
    if: ${{ needs.run-tests.outputs.build_flag == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    steps:
      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/${{ matrix.arch }}
      
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.arch }}
          cache-binary: true
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.DOCKER_PAT }}

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Build & push ${{ matrix.arch }} image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          ssh: default
          tags: ${{ env.IMAGE_NAME }}:${{ matrix.arch }}
          cache-to: type=registry,ref=${{ env.IMAGE_TAG }}:cache-${{ matrix.arch }},mode=max
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}:cache-${{ matrix.arch }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        if: ${{ needs.build-check.outputs == 'true' }}
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ needs.build-check.outputs == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-linux-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: warn
          retention-days: 1

  manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.DOCKER_PAT }}
      
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create and push multi-platform manifest
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)