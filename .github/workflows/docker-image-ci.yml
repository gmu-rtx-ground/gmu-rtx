name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ghcr.io/${{ github.repository }}

permissions:
  contents: read
  pull-requests: read

jobs:
  filter:
      runs-on: ubuntu-latest
      outputs:
        amd64_changed: ${{ steps.filter.outputs.amd64_changed }}
        arm64_changed: ${{ steps.filter.outputs.arm64_changed }}
        arduino_changed: ${{ steps.filter.outputs.arduino_changed }}
      steps:
        - uses: actions/checkout@v4
        - name: Check which file(s) have changed
          id: filter
          uses: dorny/paths-filter@v3
          with:
            filters: |
              amd64_changed:
                - 'docker/Dockerfile.amd64'
              arm64_changed:
                - 'docker/Dockerfile.arm64'
              arduino:
                - 'Arduino/**'
              python:
                - 'python/**'
              ROS:
                - 'ROS/**'

  test-arduino:
    needs: filter
    if: needs.filter.outputs.arduino == 'true'
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
        platform: [ 'arduino:avr:mega' ]
        include:
          - arduino-platform: 'arduino:avr'
            fqbn: 'arduino:avr:mega'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v2

      - name: Install board support
        run: |
          ardiuno-cli core update-index
          arduino-cli core install ${{ matrix.arduino-platform }}

      - name: Compile sketch
        run: |
          arduino-cli compile --fqbn ${{ matrix.fqbn }} ${{ github.workspace }}/Arduino/robot_controller

  test-python:
    needs: filter
    if: needs.filter.outputs.python == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

  test-ros:
    needs: filter
    if: needs.filter.outputs.ROS == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  build-check:
    needs: [ filter, test-arduino, test-python, test-ros ]
    runs-on: ubuntu-latest
    outputs:
      condition: ${{ steps.filter.outputs.condition }}
    steps:
      - name: Evaluate build conditions
        id: filter
        run: | 
          if [ "${{ github.event_name }}" != "pull_request" ] && \
            { [ "${{ needs.test-arduino.result }}" = "success" ] || [ "${{ needs.test-arduino.result }}" = "skipped" ]; } || \
            { [ "${{ needs.test-python.result }}" = "success" ] || [ "${{ needs.test-python.result }}" = "skipped" ]; } || \
            { [ "${{ needs.test-ros.result }}" = "success" ] || [ "${{ needs.test-ros.result }}" = "skipped" ]; } || \
            { [ "${{ needs.filter.outputs.amd64_changed }}" = "true" ] || [ "${{ needs.filter.outputs.arm64_changed }}" = "true" ]; }; then
            echo "condition=true" >> $GITHUB_OUTPUT
          else
            echo "condition=false" >> $GITHUB_OUTPUT
          fi


  build:
    needs: build-check
    if: needs.build-check.outputs.condition == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/${{ matrix.arch }}
      
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.arch }}
          cache-binary: true
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.DOCKER_PAT }}

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Build & push ${{ matrix.arch }} image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.arch }}
          push: true
          platforms: linux/${{ matrix.arch }}
          ssh: default
          tags: ${{ env.IMAGE_NAME }}:${{ matrix.arch }}
          cache-to: type=registry,ref=${{ env.IMAGE_TAG }}:cache-${{ matrix.arch }},mode=max
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}:cache-${{ matrix.arch }}

  manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.DOCKER_PAT }}

      - name: Create and push multi-platform manifest
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:amd64 \
            ghcr.io/${{ github.repository }}:arm64
